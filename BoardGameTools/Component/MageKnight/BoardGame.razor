@page "/BoardGame/{title}/{id:int}"
@inherits BoardGameBase
@using BoardGameTools.Component.MageKnight.Models

<style>
    .selected {
        background-color: #1E88E5 !important;
    }

        .selected > td {
            color: white !important;
        }

            .selected > td .mud-input {
                color: white !important;
            }
</style>

<MudContainer Class="mt-8">
    @if (Result.Success)
    {
    
            <Alert SeverityValue="Severity.Info" Text="Successfully" VisibleValue="@Visible"></Alert>
            <HistoryCard UsedCards="Result.Cards"></HistoryCard>
    
    }
    else
    {
        <Alert SeverityValue="Severity.Error" Text="Your are too bad" VisibleValue="@Visible"></Alert>
    }
</MudContainer>

<MudGrid Class="mt-16 pl-16 pr-16">
    <MudItem xs="12" sm="6" md="6">
        <MudTable Items="@Cards" MultiSelection="true" @bind-SelectedItems="SelectedCards" Filter="new Func<Cards,bool>(FilterCards1)">
            <ToolBarContent>
                <MudText Typo="Typo.h6">@Title</MudText>
                <MudSpacer />
                <MudTextField @bind-Value="_searchString" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
            </ToolBarContent>
            <HeaderContent>
                <MudTh>Name</MudTh>
                <MudTh>Characteristic</MudTh>
                <MudTh>Value</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd>@context.Name</MudTd>
                <MudTd>@context.Characteristics.CharacteristicType</MudTd>
                <MudTd>@context.Characteristics.Value</MudTd>
            </RowTemplate>
        </MudTable>
    </MudItem>
    <MudItem xs="12" sm="6" md="6">
        <MudTable Items="@Monsters" Hover="true" @bind-SelectedItem="SelectedMonster" Breakpoint="Breakpoint.Sm" @ref="@_mudTable" RowClassFunc="@SelectedRowClassFunc" Style="background-color:whitesmoke;">
            <ToolBarContent>
                <MudText Typo="Typo.h6">Monsters</MudText>
            </ToolBarContent>
            <HeaderContent>
                <MudTh>Name</MudTh>
                <MudTh>Attack</MudTh>
                <MudTh>Armor</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd>@context.Name</MudTd>
                <MudTd>@context.Attack</MudTd>
                <MudTd>@context.Armor</MudTd>
            </RowTemplate>
        </MudTable>
    </MudItem>
</MudGrid>
<MudContainer Style="text-align:center;" Class="mt-16">
    <MudButton Variant="Variant.Filled" Color="Color.Primary" Size="Size.Large" Class="mt-16" Style="width:15%;" OnClick="Attacking">Go</MudButton>
</MudContainer>

@code{
    [Parameter]
    public string Title { get; set; } = string.Empty;
    private string _searchString = string.Empty;
    
    private MudTable<Monsters> _mudTable = null!;

    private bool FilterCards1(Cards card) => FilterCards(card, _searchString);

    private static bool FilterCards(Cards card, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (card.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if ($"{card.Characteristics.CharacteristicType}".Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if ($"{card.Characteristics.Value}".Contains(searchString))
            return true;
        return false;
    }

    private string SelectedRowClassFunc(Monsters monster, int rowNumber)
    {
        if(_mudTable.SelectedItem != null && _mudTable.SelectedItem.Equals(monster))
            return "selected";
        return string.Empty;
    }
}